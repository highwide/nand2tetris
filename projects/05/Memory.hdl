// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

 // Memory: RAM(16K) 64 * 256

// 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
//                         |-> RAM64のアドレス




CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMUX(in=load, sel=address[14], a=memLoad, b=screenOrKeyboard);
    // 1 / 0 -> screen | 1 / 1 -> keyboard

    RAM16K(in=in, load=memLoad, address=[13..0]);


    RAM16K(in=, load=, address=, out=);
    // Put your code here:
}
