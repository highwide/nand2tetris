// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode specification
    //
    //  i  x  x  a  c  c c c c c d d d j j j
    // 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
    //


    // instruction[15] -> i; 0: A命令(アドレス命令), 1: C命令(計算命令)
    //
    // A命令:
    //   * Aレジスタへの定数の代入
    //   * メモリ操作: Aレジスタにメモリのアドレスを設定->次のC命令でメモリ位置のデータ操作
    //   * 移動命令: Aレジスタにメモリアドレスを設定->次のC命令(jump命令)で命令位置を移動
    //
    // C命令:
    // instruction[12] -> comp(a); Aレジスタかメモリ入力か
    // instruction[11..6] -> comp(c); ALUがどの関数を実行するか
    // instruction[5..3] -> dest; ALUの結果をレジスタに書き込むかどうか
    //   * instruction[5] -> Aレジスタ
    //   * instruction[4] -> Dレジスタ
    //   * instruction[3] -> Memory
    // instruction[2..0] -> jump;
    //   * instruction[2] -> ALUの出力がマイナスならJump
    //   * instruction[1] -> ALUの出力が0ならJump
    //   * instruction[0] -> ALUの出力がプラスならJump

    // A命令じゃない、かつ、inst[5]が立っていたらALUを生かす
    // => NOT(A) && inst[5]
    // => C && inst[5]
    // => inst[15] && inst[5]
    And(a=instruction[15], b=instruction[5], out=shouldUseAlu);
    Mux16(a=instruction, b=aluOut, sel=shouldUseAlu, out=instOrAlu);

    Not(in=instruction[15], out=isAorder);
    Or(a=isAorder, b=shouldUseAlu, out=shouldWriteAlu);
    ARegister(in=instOrAlu, load=shouldWriteAlu, out=aRegOut, out[0..14]=addressM);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrMMuxOut);
    DRegister(in=aluOut, load=instruction[4], out=dRegOut);
    ALU(
        x=dRegOut,
        y=aOrMMuxOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=isZero,
        ng=isNeg
    );

    And(a=instruction[2], b=isNeg, out=jumpIfNeg);
    And(a=instruction[1], b=isZero, out=jumpIfZero);
    Or(a=isNeg, b=isZero, out=isNotPos);
    Not(in=isNotPos, out=isPos);
    And(a=instruction[0], b=isPos, out=jumpIfPos);

    Or(a=jumpIfNeg, b=jumpIfZero, out=jumpIfNegOrZero);
    Or(a=jumpIfNegOrZero, b=jumpIfPos, out=jumpByAlu);
    And(a=jumpByAlu, b=instruction[15], out=jump);
    Not(in=jump, out=inc);
    PC(in=aRegOut, load=jump, inc=inc, reset=reset, out[0..14]=pc);

    And(a=instruction[3], b=instruction[15], out=writeM);
}
